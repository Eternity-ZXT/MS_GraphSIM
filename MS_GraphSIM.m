% function MS_GraphSIM_score = MS_GraphSIM(name_fast, name_r, name_d, r_b, r_s, n_s)   
% name_fast: the keypoint resampling of point cloud, generated by demo_fast_make.m
% name_r: reference point cloud
% name_d: distorted point cloud
% r_b: blurring radius
% r_s£ºshrinking rate
% scale: the number of scales that are fused into a multiscale score

clear
name_fast = ('redandblack10000_4.ply');
name_r = ('redandblack.ply'); 
name_d = ('redandblack_0_0.ply'); 
r_b = 1/2; r_s = 1/3; n_s = 3;

tic;
T = 0.001;
%rng(0)

pc_fast = pcread(name_fast);
pc_r = pcread(name_r);
pc_d = pcread(name_d);
%% Neighbor Dimension
pc_r_coor = pc_r.Location;
pc_d_coor = pc_d.Location;
pc_fast_coor = pc_fast.Location;

max_x = max(pc_r_coor(:,1)) - min(pc_r_coor(:,1));
max_y = max(pc_r_coor(:,2)) - min(pc_r_coor(:,2));
max_z = max(pc_r_coor(:,3)) - min(pc_r_coor(:,3));
box = [max_x, max_y, max_z];
epsilon = floor(min(box)/10);
r = pc_fast.Count;
sample_LMN = cell(r,1);

[idx, dit] = rangesearch(pc_r_coor, pc_fast_coor, epsilon);
[idx_d, dit_d] = rangesearch(pc_d_coor, pc_fast_coor, epsilon);


for s = 1:r
    %% graph creation
    [G, pointset, center, weight, radius] = graphcreation_radius(pc_r, pc_fast, idx{s,1}, dit{s,1}, s, r_b);
    [G_d, pointset_d, center_d, weight_d, radius_d] = graphcreation_radius(pc_d, pc_fast, idx_d{s,1}, dit_d{s,1}, s, r_b);
    %% Multiscale operation*5
    % lowpass filtering for color information
    pointset1=graphBlur(G, pointset); 
    pointset_d1=graphBlur(G_d, pointset_d);
    % downsampling and local region shrinking
    [G1, pointset1, weight1]=graphSample(G, pointset1, center, weight, radius, r_b, r_s);
    [G_d1, pointset_d1, weight_d1]=graphSample(G_d, pointset_d1, center_d, weight_d, radius_d, r_b, r_s);
    
    pointset2=graphBlur(G1, pointset1);
    pointset_d2=graphBlur(G_d1, pointset_d1);
    [G2, pointset2, weight2]=graphSample(G1, pointset2, center, weight1, radius, r_b, r_s);
    [G_d2, pointset_d2, weight_d2]=graphSample(G_d1, pointset_d2, center_d, weight_d1, radius_d, r_b, r_s);
    
    pointset3=graphBlur(G2, pointset2);
    pointset_d3=graphBlur(G_d2, pointset_d2);
    [G3, pointset3, weight3]=graphSample(G2, pointset3, center, weight2, radius, r_b, r_s);
    [G_d3, pointset_d3, weight_d3]=graphSample(G_d2, pointset_d3, center_d, weight_d2, radius_d, r_b, r_s);
    
    pointset4=graphBlur(G3, pointset3);
    pointset_d4=graphBlur(G_d3, pointset_d3);
    [G4, pointset4, weight4]=graphSample(G3, pointset4, center, weight3, radius, r_b, r_s);
    [G_d4, pointset_d4, weight_d4]=graphSample(G_d3, pointset_d4, center_d, weight_d3, radius_d, r_b, r_s);
    
    pointset5=graphBlur(G4, pointset4);
    pointset_d5=graphBlur(G_d4, pointset_d4);
    [G5, pointset5, weight5]=graphSample(G4, pointset5, center, weight4, radius, r_b, r_s);
    [G_d5, pointset_d5, weight_d5]=graphSample(G_d4, pointset_d5, center_d, weight_d4, radius_d, r_b, r_s);
    
    %% similarity computation 
    feature_LMN = computeSimilarity(pointset, pointset_d, center, center_d, weight, weight_d, T);
    feature_LMN1 = computeSimilarity(pointset1, pointset_d1, center, center_d, weight1, weight_d1, T);
    feature_LMN2 = computeSimilarity(pointset2, pointset_d2, center, center_d, weight2, weight_d2, T);
    feature_LMN3 = computeSimilarity(pointset3, pointset_d3, center, center_d, weight3, weight_d3, T);
    feature_LMN4 = computeSimilarity(pointset4, pointset_d4, center, center_d, weight4, weight_d4, T);
    feature_LMN5 = computeSimilarity(pointset5, pointset_d5, center, center_d, weight5, weight_d5, T);

    sample_LMN{s,1}=feature_LMN;
    sample_LMN1{s,1}=feature_LMN1;
    sample_LMN2{s,1}=feature_LMN2;
    sample_LMN3{s,1}=feature_LMN3;
    sample_LMN4{s,1}=feature_LMN4;
    sample_LMN5{s,1}=feature_LMN5;
    
    text = sprintf('%s-%s : %d/%d graph have been computed', name_r, name_d, s, r);
    disp(text)
   
end
L=6;M=1;N=1;
%% compute GraphSIM at different scales 
GraphSIM_score(1)=cal_mos(sample_LMN,L,M,N);
GraphSIM_score(2)=cal_mos(sample_LMN1,L,M,N);
GraphSIM_score(3)=cal_mos(sample_LMN2,L,M,N);
GraphSIM_score(4)=cal_mos(sample_LMN3,L,M,N);
GraphSIM_score(5)=cal_mos(sample_LMN4,L,M,N);
GraphSIM_score(6)=cal_mos(sample_LMN5,L,M,N);

%% Multiscale fusion
MS_GraphSIM_score = sum(GraphSIM_score(1:n_s))/n_s;
fprintf('MS_GraphSIM: %d\n',MS_GraphSIM_score);
toc;